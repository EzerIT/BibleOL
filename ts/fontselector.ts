// -*- js -*-
// Copyright Â© 2018 by Ezer IT Consulting. All rights reserved. E-mail: claus@ezer.dk

// Code for creating the font selection web page

/// <reference path="fontdetect.d.ts" />
/// <reference path="util.ts" />
/// <reference path="localization_general.ts" />

//****************************************************************************************************
// FontSelector class
//
// Contains functions that generate HTML code for the font selection web page.
// The main method, detectFonts, is called by JavaScript code generated by the server.
//
class FontSelector {
    private alphabet            : string;   // Name of alphabet ('hebrew', 'hebrew-translit', 'greek', or 'latin')
    private sample              : string;   // Sample text in specified alphabet
    private direction           : string;   // 'rtl' or 'ltr' for right-to-left or left-to-right writing
    private text_align          : string;   // 'right' or 'left' for right-to-left or left-to-right writing
    private detector            : Detector; // Font detector
    private inputName           : string;   // Name of <input type="radio"> element for selecting a particular font
    private tableSelector       : JQuery;   // Table element containing font list
    private myfont_text         : JQuery;   // The Input element for the personal font name
    private myfont_radio_button : JQuery;   // The radio button for the personal font name

    //------------------------------------------------------------------------------------------
    // Constructor method
    //
    // Parameters:
    //     alphabet: Name of alphabet ('hebrew', 'hebrew-translit', 'greek', or 'latin').
    //     sample: Sample text in specified alphabet.
    //     direction: 'rtl' or 'ltr' for right-to-left or left-to-right writing.
    //
    constructor(alphabet : string, sample : string, direction : string) {
        this.alphabet      = alphabet;
        this.sample        = sample;
        this.direction     = direction;
        this.text_align    = direction=='rtl' ? 'right' : 'left';
        this.detector      = new Detector(alphabet);
        this.inputName     = alphabet + 'choice';
        this.tableSelector = $(`#${alphabet}font`);
    }

    //------------------------------------------------------------------------------------------
    // familyChange method
    //
    // Called when the user's font selection changes. The function updates the font used for
    // displaying the text sample.
    //
    private familyChange() : void {
        let val = $('input:radio[name="' + this.alphabet + 'choice"]:checked').attr('data-family'); // Font family name
        if (val==='XXmineXX') { // Personal font
            val = this.myfont_text.prop('value');
            $(`#${this.alphabet}_mysample`).css('font-family',val); // Change font of sample text
        }
        $(`.${this.alphabet}sample`).css('font-family',val); // Change font of sample text
    }

    //------------------------------------------------------------------------------------------
    // personalChange method
    //
    // Called when the user's personal font name changes. The function selects the personal font and
    // updates the font used for displaying the text sample.
    //
    private personalChange() : void {
        $(`input:radio[value="${this.alphabet}_mine"]`).prop('checked',true); // Select personal fnt
        this.familyChange();
    }

    //------------------------------------------------------------------------------------------
    // detectFonts method
    //
    // Goes through a font list and if a particular font exists in the browser, an entry for that
    // font is created in the font table.
    //
    // Parameters:
    //     fontlist: Array of fonts to go through.
    //     personal_font: Name of personal font.
    //     default_val: "value" attribute of currently checked font randio button.
    //
    public detectFonts(fontlist : { name:string; webfont:boolean; }[], personal_font : string, default_val : string) : void {

        // Go through all specified fonts
        for (let i=0, len=fontlist.length; i<len; ++i) {
            if (fontlist[i].webfont || this.detector.detect(fontlist[i].name)) {
                // The font exists in the browser
                
                let radio_button = $(`<input name="${this.inputName}" type="radio" data-family="${fontlist[i].name}" value="${this.alphabet}_${i}">`);

                let td1 = $('<td>').append(fontlist[i].name);
                let td2 = $(`<td class="sample" style="direction:${this.direction}; text-align:${this.text_align}; font-family:${fontlist[i].name}; font-size:16pt;">`)
                    .append(this.sample);
                let td3 = $('<td class="centeralign">').append(radio_button);
                let tr = $('<tr>').append(td1).append(td2).append(td3);
                this.tableSelector.append(tr);
            }
        }

        // Add personal font
        this.myfont_text = $(`<input type="text" name="${this.alphabet}_myfont" value="${personal_font}">`);
        this.myfont_radio_button = $(`<input name="${this.inputName}" type="radio" data-family="XXmineXX" value="${this.alphabet}_mine">`);

        let td1 = $('<td>').append(localize('or_write_preferred')+'<br>').append(this.myfont_text);
        let td2 = $(`<td class="sample" id="${this.alphabet}_mysample" style="direction:${this.direction}; text-align:${this.text_align}; font-family:${personal_font}; font-size:16pt;">`)
            .append(this.sample);
        let td3 = $('<td class="centeralign">').append(this.myfont_radio_button);
        let tr = $('<tr>').append(td1).append(td2).append(td3);
        this.tableSelector.append(tr);

        $(`input:radio[value="${default_val}"]`).prop('checked',true);


        // Handle changing of font selection
        $(`input:radio[name="${this.inputName}"]`).on('change', () => this.familyChange());
        this.familyChange();

        this.myfont_text.on('input', (e : JQueryEventObject) => this.personalChange());
    }
}
