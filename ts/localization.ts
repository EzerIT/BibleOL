// -*- js -*-
// Copyright Â© 2018 by Ezer IT Consulting. All rights reserved. E-mail: claus@ezer.dk

// Client-side handling of localization of grammatical terms. The server stores localization strings
// in the variable l10n which has the interface 'Localization'.
// Localization of the interface is handled by the code in localization_general.ts.

//****************************************************************************************************
// Localization interface
//
// This data-only interface defines localized strings for a particular Emdros database. They
// correspond to the data in the {PRE}db_localize database table. (Similar to the the contents of
// the files found in the directory db/property_files.)
//
// For a description of this interface, see the section "Internationalization of the Client Code" in
// the techical documentation.
//
interface Localization {
    dbdescription : string;
    dbcopyright : string;
    emdrosobject : {
        [objType : string] : { 
            _objname : string;
            [featureValue : string] : string | typeValues[];
        };
    };
    emdrostype : {
        [enumType : string] : {
            [enumValue : string] : string;
        };
    };
    grammargroup? : {
        [objType : string] : {
            [groupValue : string] : string; 
        }; 
    };
    grammarfeature? : {
        [objType : string] : {
            [featureValue : string] : string; 
        }; 
    };
    grammarmetafeature? : {
        [objType : string] : {
            [featureValue : string] : string; 
        }; 
    };
    grammarsubfeature? : {
        [objType : string] : {
            [featureName : string] : {
                [featureValue : string] : string; 
            }; 
        }; 
    };
    universe : {
        [objType : string] : {
            _label : string;
            [featurevalue : string] : string; 
        }; 
    };
}

//****************************************************************************************************
// typeValues interface
//
// Describes xxx_TYPE_xxx_VALUES information in the localization structure.
//
interface typeValues {
    first : number,   // The first value in a range
    last : number,    // The last value in a range
    text : string     // The localized name for the range
}


//****************************************************************************************************
// l10n variable
//
// Contains localized terms for the current Emdros database.
// The variable is generated by the server code.
//
declare let l10n : Localization;


//****************************************************************************************************
// getObjectFriendlyName function
//
// Retrieves the localized name of an Emdros object type.
//
// Param:
//     otype: The Emdros object type.
// Returns:
//     The localized name for the Emdros object type.
//
function getObjectFriendlyName(otype : string) : string {
    if (otype==='Patriarch') // Shouldn't happen
        return otype;
    let fn : string = l10n.emdrosobject[otype]._objname;
    return fn ? fn : otype;
}

//****************************************************************************************************
// getObjectShortFriendlyName function
//
// Retrieves the abbreviated localized name of an Emdros object type.
//
// Param:
//     otype: The Emdros object type.
// Returns:
//     The abreviated localized name for the Emdros object type, if it exists. Otherwise the
//     unabbreviated localized name is returned.
//
function getObjectShortFriendlyName(otype : string) : string {
    if (l10n.emdrosobject[otype + '_abbrev']===undefined)
        return getObjectFriendlyName(otype);
    else
        return l10n.emdrosobject[otype + '_abbrev']._objname;
}


//****************************************************************************************************
// getFeatureFriendlyName function
//
// Retrieves the localized name of an Emdros object feature.
//
// Param:
//     otype: The Emdros object type.
//     feature: The Emdros object feature.
// Returns:
//     The localized name for the Emdros object feature.
//
function getFeatureFriendlyName(otype : string, feature : string) : string
{
    if (feature==='visual')
        return localize('visual');

    let fn : string = l10n.emdrosobject[otype][feature] as string;
    return fn ? fn : feature;
}


//****************************************************************************************************
// getFeatureValueFriendlyName function
//
// Retrieves the localized name of an Emdros object feature value.
//
// Param:
//     featureType: The Emdros object feature type.
//     value: The Emdros object feature value.
//     abbrev: True if the function should return an abbreviated name, if one exists.
//     doStripSort: True if an optional sort index should be removed from the localized value.
// Returns:
//     The localized name for the Emdros object feature value.
//
function getFeatureValueFriendlyName(featureType : string, value : string, abbrev : boolean, doStripSort : boolean) : string {
    if (abbrev && l10n.emdrostype[featureType + '_abbrev']!==undefined)
        // TODO: We assume there is no "list of " types here
        return doStripSort
                  ? StringWithSort.stripSortIndex(l10n.emdrostype[featureType + '_abbrev'][value])
                  : l10n.emdrostype[featureType + '_abbrev'][value];
    

    // TODO: For now, we handle "list of ..." here.
    // Currently, "list of ..." is only used with Hebrew verb classes.
    // The correctness of this code must be reconsidered if "list of ..." is used for other features.
    if (featureType.substr(0,8)==='list of ') {
        featureType = featureType.substr(8); // Remove "list of "
        value = value.substr(1,value.length-2); // Remove parenteses
        if (value.length==0)
            return doStripSort
                      ? StringWithSort.stripSortIndex(l10n.emdrostype[featureType]['NA'])
                      : l10n.emdrostype[featureType]['NA'];

        let verb_classes : string[] = value.split(','); // Turn the list of values into an array
        let localized_verb_classes : string[] = []; // Localized values will be stored here

        for (let ix in verb_classes) {
            if (isNaN(+ix)) continue; // Not numeric
            localized_verb_classes.push(doStripSort
                                            ? StringWithSort.stripSortIndex(l10n.emdrostype[featureType][verb_classes[ix]])
                                            : l10n.emdrostype[featureType][verb_classes[ix]]);
        }
                
        localized_verb_classes.sort();
        return localized_verb_classes.join(', '); // Turn the array of localized values into a string
    }

    return doStripSort
             ? StringWithSort.stripSortIndex(l10n.emdrostype[featureType][value])
             : l10n.emdrostype[featureType][value];
}

//****************************************************************************************************
// getFeatureValueOtherFormat function
//
// Retrieves the localized name of a range containing an Emdros object feature value.
//
// Param:
//     otype: The Emdros object type
//     featureName: The Emdros object feature.
//     value: The Emdros object feature value.
// Returns:
//     The localized name for the range containing the Emdros object feature value.
//
function getFeatureValueOtherFormat(otype : string, featureName : string, value : number) : string {
    let table : typeValues[] = l10n.emdrosobject[otype][featureName + '_VALUES'] as typeValues[];

    for (let ix=0; ix<table.length; ++ix)
        if (table[ix].first<=value && table[ix].last>=value)
            return table[ix].text;

    return '?';
}


//*************************************************************************************
// getHtmlAttribFriendlyName function
//
//     Replaces spaces by underscores to be used as HTML attributes
//
// Param:
//     str: string to be webkitConvertPointFromPageToNode
// Returns:
//     str in which spaces are replaced by underscores

function getHtmlAttribFriendlyName(str: string): string {
    return str.split(' ').join('_');
}